# .github/workflows/scheduler.yml
# 定时任务执行时间已修正并转换为 UTC (CST - 8小时)

name: Scheduled Data Crawler

on:
  # 允许手动触发所有任务
  workflow_dispatch:

  # 任务 1 (24h - 每天 00:00 CST -> 每天 16:00 UTC)
  schedule:
    - cron: '0 16 * * *'

    # 任务 2 (12h - 每天 00:00 和 12:00 CST -> 每天 16:00 和 04:00 UTC)
    - cron: '0 4,16 * * *'

    # 任务 3 (30m - 每小时 00:00 和 30:00 CST -> 每小时 00:00 和 30:00 UTC，小时偏移不影响分钟)
    - cron: '0,30 * * * *'

# 授予工作流对仓库内容（如代码和文件）的写入权限
permissions:
  contents: write

jobs:
  # 辅助 Job: 设置环境 (用于依赖安装和 Python 基础配置)
  setup_env:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
    outputs:
      repo_path: ${{ github.workspace }}

  # 任务 Job 模板 (根据触发事件决定运行哪个)
  run_crawler_task:
    needs: setup_env
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ----------------------------------------------------
      # 步骤 1: 运行任务 1 (每天 00:00 CST)
      # 条件：手动触发，或 cron 完全匹配 '0 16 * * *'
      # ----------------------------------------------------
      - name: Run TASK 1 (24h)
        if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 16 * * *'
        run: python crawler.py TASK_1

      # ----------------------------------------------------
      # 步骤 2: 运行任务 2 (每天 00:00 和 12:00 CST)
      # 条件：手动触发，或 cron 匹配 '0 4,16 * * *'
      # ----------------------------------------------------
      - name: Run TASK 2 (12h)
        if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 4,16 * * *'
        run: python crawler.py TASK_2

      # ----------------------------------------------------
      # 步骤 3: 运行任务 3 (每 30 分钟 CST)
      # 条件：手动触发，或 cron 匹配 '0,30 * * * *'
      # ----------------------------------------------------
      - name: Run TASK 3 (30m)
        if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0,30 * * * *'
        run: python crawler.py TASK_3

      # ----------------------------------------------------
      # 提交更新
      # ----------------------------------------------------
      - name: Commit and Push new data
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "SCHEDULER: Auto-update data."
          file_pattern: 'zgyd/*.json zgyd/metadata.json'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'